{"version":3,"sources":["webpack:///webpack/bootstrap 6d4aa6c852f6459e5eb3","webpack:///./src/util.coffee","webpack:///./src/node.coffee","webpack:///./src/node_element.coffee","webpack:///./src/simple.widget.coffee","webpack:///./src/tree.jquery.coffee","webpack:///./src/drag_and_drop_handler.coffee","webpack:///./src/elements_renderer.coffee","webpack:///./src/key_handler.coffee","webpack:///./src/mouse.widget.coffee","webpack:///./src/save_state_handler.coffee","webpack:///./src/scroll_handler.coffee","webpack:///./src/select_node_handler.coffee","webpack:///./src/version.coffee"],"names":[],"mappings":"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","file":"tree.jquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6d4aa6c852f6459e5eb3","# Standard javascript indexOf. Implemented here because not all browsers support it.\n_indexOf = (array, item) ->\n    for value, i in array\n        if value == item\n            return i\n    return -1\n\nindexOf = (array, item) ->\n    if array.indexOf\n        # The browser supports indexOf\n        return array.indexOf(item)\n    else\n        # Do our own indexOf\n        return _indexOf(array, item)\n\nisInt = (n) ->\n    return typeof n is 'number' and n % 1 == 0\n\n\nisFunction = (v) ->\n    return typeof v == 'function'\n\n\n# Escape a string for HTML interpolation; copied from underscore js\nhtml_escape = (string) ->\n    return (''+string)\n        .replace(/&/g, '&amp;')\n        .replace(/</g, '&lt;')\n        .replace(/>/g, '&gt;')\n        .replace(/\"/g, '&quot;')\n        .replace(/'/g, '&#x27;')\n        .replace(/\\//g,'&#x2F;')\n\n\ngetBoolString = (value) ->\n    if value\n        return 'true'\n    else\n        return 'false'\n\n\nmodule.exports =\n    _indexOf: _indexOf\n    getBoolString: getBoolString\n    html_escape: html_escape\n    indexOf: indexOf\n    isInt: isInt\n    isFunction: isFunction\n\n\n\n// WEBPACK FOOTER //\n// ./src/util.coffee","$ = jQuery\n\n\nPosition =\n    getName: (position) ->\n        return Position.strings[position - 1]\n\n    nameToIndex: (name) ->\n        for i in [1..Position.strings.length]\n            if Position.strings[i - 1] == name\n                return i\n        return 0\n\nPosition.BEFORE = 1\nPosition.AFTER = 2\nPosition.INSIDE = 3\nPosition.NONE = 4\n\nPosition.strings = ['before', 'after', 'inside', 'none']\n\nclass Node\n    constructor: (o, is_root=false, node_class=Node) ->\n        @name = ''\n\n        @setData(o)\n\n        @children = []\n        @parent = null\n\n        if is_root\n            @id_mapping = {}\n            @tree = this\n            @node_class = node_class\n\n    setData: (o) ->\n        ###\n        Set the data of this node.\n\n        setData(string): set the name of the node\n        setdata(object): set attributes of the node\n\n        Examples:\n            setdata('node1')\n\n            setData({ name: 'node1', id: 1});\n\n            setData({ name: 'node2', id: 2, color: 'green'});\n\n        * This is an internal function; it is not in the docs\n        * Does not remove existing node values\n        ###\n        setName = (name) =>\n            if name != null\n                @name = name\n\n        if typeof o != 'object'\n            setName(o)\n        else\n            for key, value of o\n                if key == 'label'\n                    # You can use the 'label' key instead of 'name'; this is a legacy feature\n                    setName(value)\n                else if key != 'children'\n                    # You can't update the children using this function\n                    @[key] = value\n\n        return null\n\n    # Init Node from data without making it the root of the tree\n    initFromData: (data) ->\n        addNode = (node_data) =>\n            @setData(node_data)\n\n            if node_data.children\n                addChildren(node_data.children)\n\n        addChildren = (children_data) =>\n            for child in children_data\n                node = new @tree.node_class('')\n                node.initFromData(child)\n                @addChild(node)\n            return null\n\n        addNode(data)\n        return null\n\n    ###\n    Create tree from data.\n\n    Structure of data is:\n    [\n        {\n            label: 'node1',\n            children: [\n                { label: 'child1' },\n                { label: 'child2' }\n            ]\n        },\n        {\n            label: 'node2'\n        }\n    ]\n    ###\n    loadFromData: (data) ->\n        @removeChildren()\n\n        for o in data\n            node = new @tree.node_class(o)\n            @addChild(node)\n\n            if typeof o == 'object' and o.children\n                node.loadFromData(o.children)\n\n        return null\n\n    ###\n    Add child.\n\n    tree.addChild(\n        new Node('child1')\n    );\n    ###\n    addChild: (node) ->\n        @children.push(node)\n        node._setParent(this)\n\n    ###\n    Add child at position. Index starts at 0.\n\n    tree.addChildAtPosition(\n        new Node('abc'),\n        1\n    );\n    ###\n    addChildAtPosition: (node, index) ->\n        @children.splice(index, 0, node)\n        node._setParent(this)\n\n    _setParent: (parent) ->\n        @parent = parent\n        @tree = parent.tree\n        @tree.addNodeToIndex(this)\n\n    ###\n    Remove child. This also removes the children of the node.\n\n    tree.removeChild(tree.children[0]);\n    ###\n    removeChild: (node) ->\n        # remove children from the index\n        node.removeChildren()\n\n        @_removeChild(node)\n\n    _removeChild: (node) ->\n        @children.splice(\n            @getChildIndex(node),\n            1\n        )\n        @tree.removeNodeFromIndex(node)\n\n    ###\n    Get child index.\n\n    var index = getChildIndex(node);\n    ###\n    getChildIndex: (node) ->\n        return $.inArray(node, @children)\n\n    ###\n    Does the tree have children?\n\n    if (tree.hasChildren()) {\n        //\n    }\n    ###\n    hasChildren: ->\n        return @children.length != 0\n\n    isFolder: ->\n        return @hasChildren() or @load_on_demand\n\n    ###\n    Iterate over all the nodes in the tree.\n\n    Calls callback with (node, level).\n\n    The callback must return true to continue the iteration on current node.\n\n    tree.iterate(\n        function(node, level) {\n           console.log(node.name);\n\n           // stop iteration after level 2\n           return (level <= 2);\n        }\n    );\n\n    ###\n    iterate: (callback) ->\n        _iterate = (node, level) ->\n            if node.children\n                for child in node.children\n                    result = callback(child, level)\n\n                    if result and child.hasChildren()\n                        _iterate(child, level + 1)\n                return null\n\n        _iterate(this, 0)\n        return null\n\n    ###\n    Move node relative to another node.\n\n    Argument position: Position.BEFORE, Position.AFTER or Position.Inside\n\n    // move node1 after node2\n    tree.moveNode(node1, node2, Position.AFTER);\n    ###\n    moveNode: (moved_node, target_node, position) ->\n        if moved_node.isParentOf(target_node)\n            # Node is parent of target node. This is an illegal move\n            return\n\n        moved_node.parent._removeChild(moved_node)\n        if position == Position.AFTER\n            target_node.parent.addChildAtPosition(\n                moved_node,\n                target_node.parent.getChildIndex(target_node) + 1\n            )\n        else if position == Position.BEFORE\n            target_node.parent.addChildAtPosition(\n                moved_node,\n                target_node.parent.getChildIndex(target_node)\n            )\n        else if position == Position.INSIDE\n            # move inside as first child\n            target_node.addChildAtPosition(moved_node, 0)\n\n    ###\n    Get the tree as data.\n    ###\n    getData: (include_parent=false) ->\n        getDataFromNodes = (nodes) ->\n            data = []\n\n            for node in nodes\n                tmp_node = {}\n\n                for k, v of node\n                    if (\n                        k not in ['parent', 'children', 'element', 'tree'] and\n                        Object.prototype.hasOwnProperty.call(node, k)\n                    )\n                        tmp_node[k] = v\n\n                if node.hasChildren()\n                    tmp_node.children = getDataFromNodes(node.children)\n\n                data.push(tmp_node)\n\n            return data\n\n        if include_parent\n            return getDataFromNodes([this])\n        else\n            return getDataFromNodes(@children)\n\n    getNodeByName: (name) ->\n        return @getNodeByCallback(\n            (node) -> (node.name == name)\n        )\n\n    getNodeByCallback: (callback) ->\n        result = null\n\n        @iterate(\n            (node) ->\n                if callback(node)\n                    result = node\n                    return false\n                else\n                    return true\n        )\n\n        return result\n\n\n    addAfter: (node_info) ->\n        if not @parent\n            return null\n        else\n            node = new @tree.node_class(node_info)\n\n            child_index = @parent.getChildIndex(this)\n            @parent.addChildAtPosition(node, child_index + 1)\n\n            if typeof node_info == 'object' and node_info.children and node_info.children.length\n                node.loadFromData(node_info.children)\n\n            return node\n\n    addBefore: (node_info) ->\n        if not @parent\n            return null\n        else\n            node = new @tree.node_class(node_info)\n\n            child_index = @parent.getChildIndex(this)\n            @parent.addChildAtPosition(node, child_index)\n\n            if typeof node_info == 'object' and node_info.children and node_info.children.length\n                node.loadFromData(node_info.children)\n\n            return node\n\n    addParent: (node_info) ->\n        if not @parent\n            return null\n        else\n            new_parent = new @tree.node_class(node_info)\n            new_parent._setParent(@tree)\n            original_parent = @parent\n\n            for child in original_parent.children\n                new_parent.addChild(child)\n\n            original_parent.children = []\n            original_parent.addChild(new_parent)\n            return new_parent\n\n    remove: ->\n        if @parent\n            @parent.removeChild(this)\n            @parent = null\n\n    append: (node_info) ->\n        node = new @tree.node_class(node_info)\n        @addChild(node)\n\n        if typeof node_info == 'object' and node_info.children and node_info.children.length\n            node.loadFromData(node_info.children)\n\n        return node\n\n    prepend: (node_info) ->\n        node = new @tree.node_class(node_info)\n        @addChildAtPosition(node, 0)\n\n        if typeof node_info == 'object' and node_info.children and node_info.children.length\n            node.loadFromData(node_info.children)\n\n        return node\n\n    isParentOf: (node) ->\n        parent = node.parent\n\n        while parent\n            if parent == this\n                return true\n\n            parent = parent.parent\n\n        return false\n\n    getLevel: ->\n        level = 0\n        node = this\n\n        while node.parent\n            level += 1\n            node = node.parent\n\n        return level\n\n    getNodeById: (node_id) ->\n        return @id_mapping[node_id]\n\n    addNodeToIndex: (node) ->\n        if node.id?\n            @id_mapping[node.id] = node\n\n    removeNodeFromIndex: (node) ->\n        if node.id?\n            delete @id_mapping[node.id]\n\n    removeChildren: ->\n        @iterate(\n            (child) =>\n                @tree.removeNodeFromIndex(child)\n                return true\n        )\n\n        @children = []\n\n    getPreviousSibling: ->\n        if not @parent\n            return null\n        else\n            previous_index = @parent.getChildIndex(this) - 1\n            if previous_index >= 0\n                return @parent.children[previous_index]\n            else\n                return null\n\n    getNextSibling: ->\n        if not @parent\n            return null\n        else\n            next_index = @parent.getChildIndex(this) + 1\n            if next_index < @parent.children.length\n                return @parent.children[next_index]\n            else\n                return null\n\n    getNodesByProperty: (key, value) ->\n        return @filter(\n            (node) ->\n                return node[key] == value\n        )\n\n    filter: (f) ->\n        result = []\n\n        @iterate(\n            (node) ->\n                if f(node)\n                    result.push(node)\n\n                return true\n        )\n\n        return result\n\n    getNextNode: (include_children=true) ->\n        if include_children and @hasChildren() and @is_open\n            # First child\n            return @children[0]\n        else\n            if not @parent\n                return null\n            else\n                next_sibling = @getNextSibling()\n                if next_sibling\n                    # Next sibling\n                    return next_sibling\n                else\n                    # Next node of parent\n                    return @parent.getNextNode(false)\n\n    getPreviousNode: ->\n        if not @parent\n            return null\n        else\n            previous_sibling = @getPreviousSibling()\n            if previous_sibling\n                if not previous_sibling.hasChildren() or not previous_sibling.is_open\n                    # Previous sibling\n                    return previous_sibling\n                else\n                    # Last child of previous sibling\n                    return previous_sibling.getLastChild()\n            else\n                return @getParent()\n\n    getParent: ->\n        # Return parent except if it is the root node\n        if not @parent\n            return null\n        else if not @parent.parent\n            # Root node -> null\n            return null\n        else\n            return @parent\n\n    getLastChild: ->\n        if not @hasChildren()\n            return null\n        else\n            last_child = @children[@children.length - 1]\n            if not last_child.hasChildren() or not last_child.is_open\n                return last_child\n            else\n                return last_child.getLastChild()\n\n\nmodule.exports =\n    Node: Node\n    Position: Position\n\n\n\n// WEBPACK FOOTER //\n// ./src/node.coffee","node = require './node'\nPosition = node.Position\n\n\n$ = jQuery\n\n\nclass NodeElement\n    constructor: (node, tree_widget) ->\n        @init(node, tree_widget)\n\n    init: (node, tree_widget) ->\n        @node = node\n        @tree_widget = tree_widget\n\n        if not node.element\n            node.element = @tree_widget.element\n\n        @$element = $(node.element)\n\n    getUl: ->\n        return @$element.children('ul:first')\n\n    getSpan: ->\n        return @$element.children('.jqtree-element').find('span.jqtree-title')\n\n    getLi: ->\n        return @$element\n\n    addDropHint: (position) ->\n        if position == Position.INSIDE\n            return new BorderDropHint(@$element)\n        else\n            return new GhostDropHint(@node, @$element, position)\n\n    select: ->\n        $li = @getLi()\n\n        $li.addClass('jqtree-selected')\n        $li.attr('aria-selected', 'true')\n\n        $span = @getSpan()\n        $span.attr('tabindex', 0)\n\n    deselect: ->\n        $li = @getLi()\n\n        $li.removeClass('jqtree-selected')\n        $li.attr('aria-selected', 'false')\n\n        $span = @getSpan()\n        $span.attr('tabindex', -1)\n\n\nclass FolderElement extends NodeElement\n    open: (on_finished, slide=true) ->\n        if not @node.is_open\n            @node.is_open = true\n            $button = @getButton()\n            $button.removeClass('jqtree-closed')\n            $button.html('')\n            $button.append(@tree_widget.renderer.opened_icon_element.cloneNode(false))\n\n            doOpen = =>\n                $li = @getLi()\n                $li.removeClass('jqtree-closed')\n\n                $span = @getSpan()\n                $span.attr('aria-expanded', 'true')\n\n                if on_finished\n                    on_finished(@node)\n\n                @tree_widget._triggerEvent('tree.open', node: @node)\n\n            if slide\n                @getUl().slideDown('fast', doOpen)\n            else\n                @getUl().show()\n                doOpen()\n\n    close: (slide=true) ->\n        if @node.is_open\n            @node.is_open = false\n            $button = @getButton()\n            $button.addClass('jqtree-closed')\n            $button.html('')\n            $button.append(@tree_widget.renderer.closed_icon_element.cloneNode(false))\n\n            doClose = =>\n                $li = @getLi()\n                $li.addClass('jqtree-closed')\n\n                $span = @getSpan()\n                $span.attr('aria-expanded', 'false')\n\n                @tree_widget._triggerEvent('tree.close', node: @node)\n\n            if slide\n                @getUl().slideUp('fast', doClose)\n            else\n                @getUl().hide()\n                doClose()\n\n    getButton: ->\n        return @$element.children('.jqtree-element').find('a.jqtree-toggler')\n\n    addDropHint: (position) ->\n        if not @node.is_open and position == Position.INSIDE\n            return new BorderDropHint(@$element)\n        else\n            return new GhostDropHint(@node, @$element, position)\n\n\nclass BorderDropHint\n    constructor: ($element) ->\n        $div = $element.children('.jqtree-element')\n        width = $element.width() - 4\n\n        @$hint = $('<span class=\"jqtree-border\"></span>')\n        $div.append(@$hint)\n\n        @$hint.css(\n            width: width\n            height: $div.outerHeight() - 4\n        )\n\n    remove: ->\n        @$hint.remove()\n\n\nclass GhostDropHint\n    constructor: (node, $element, position) ->\n        @$element = $element\n\n        @node = node\n        @$ghost = $('<li class=\"jqtree_common jqtree-ghost\"><span class=\"jqtree_common jqtree-circle\"></span><span class=\"jqtree_common jqtree-line\"></span></li>')\n\n        if position == Position.AFTER\n            @moveAfter()\n        else if position == Position.BEFORE\n            @moveBefore()\n        else if position == Position.INSIDE\n            if node.isFolder() and node.is_open\n                @moveInsideOpenFolder()\n            else\n                @moveInside()\n\n    remove: ->\n        @$ghost.remove()\n\n    moveAfter: ->\n        @$element.after(@$ghost)\n\n    moveBefore: ->\n        @$element.before(@$ghost)\n\n    moveInsideOpenFolder: ->\n        $(@node.children[0].element).before(@$ghost)\n\n    moveInside: ->\n        @$element.after(@$ghost)\n        @$ghost.addClass('jqtree-inside')\n\n\nmodule.exports =\n    BorderDropHint: BorderDropHint\n    FolderElement: FolderElement\n    GhostDropHint: GhostDropHint\n    NodeElement: NodeElement\n\n\n\n// WEBPACK FOOTER //\n// ./src/node_element.coffee","###\nCopyright 2013 Marco Braak\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n###\n\n$ = jQuery\n\n\nclass SimpleWidget\n    defaults: {}\n\n    constructor: (el, options) ->\n        @$el = $(el)\n        @options = $.extend({}, @defaults, options)\n\n    destroy: ->\n        @_deinit()\n\n    _init: ->\n        null\n\n    _deinit: ->\n        null\n\n    @register = (widget_class, widget_name) ->\n        getDataKey = ->\n            return \"simple_widget_#{widget_name}\"\n\n        getWidgetData = (el, data_key) ->\n            widget = $.data(el, data_key)\n\n            if widget and (widget instanceof SimpleWidget)\n                return widget\n            else\n                return null\n\n        createWidget = ($el, options) ->\n            data_key = getDataKey()\n\n            for el in $el\n                existing_widget = getWidgetData(el, data_key)\n\n                if not existing_widget\n                    widget = new widget_class(el, options)\n\n                    if not $.data(el, data_key)\n                        $.data(el, data_key, widget)\n\n                    # Call init after setting data, so we can call methods\n                    widget._init()\n\n            return $el\n\n        destroyWidget = ($el) ->\n            data_key = getDataKey()\n\n            for el in $el\n                widget = getWidgetData(el, data_key)\n\n                if widget\n                    widget.destroy()\n\n                $.removeData(el, data_key)\n\n        callFunction = ($el, function_name, args) ->\n            result = null\n\n            for el in $el\n                widget = $.data(el, getDataKey())\n\n                if widget and (widget instanceof SimpleWidget)\n                    widget_function = widget[function_name]\n\n                    if widget_function and (typeof widget_function == 'function')\n                        result = widget_function.apply(widget, args)\n\n            return result\n\n        $.fn[widget_name] = (argument1, args...) ->\n            $el = this\n\n            if argument1 is undefined or typeof argument1 == 'object'\n                options = argument1\n                return createWidget($el, options)\n            else if typeof argument1 == 'string' and argument1[0] != '_'\n                function_name = argument1\n\n                if function_name == 'destroy'\n                    return destroyWidget($el)\n                else if function_name == 'get_widget_class'\n                    return widget_class\n                else\n                    return callFunction($el, function_name, args)\n\n\nmodule.exports = SimpleWidget\n\n\n\n// WEBPACK FOOTER //\n// ./src/simple.widget.coffee","__version__ = require './version'\ndrag_and_drop_handler = require './drag_and_drop_handler'\nElementsRenderer = require './elements_renderer'\nKeyHandler = require './key_handler'\nMouseWidget = require './mouse.widget'\nSaveStateHandler = require './save_state_handler'\nScrollHandler = require './scroll_handler'\nSelectNodeHandler = require './select_node_handler'\nSimpleWidget = require './simple.widget'\n\nnode_module = require './node'\nNode = node_module.Node\nPosition = node_module.Position\n\nutil_module = require './util'\n\n{isFunction} = util_module\n\n{BorderDropHint,FolderElement,GhostDropHint,NodeElement} = require './node_element'\n\n{DragAndDropHandler, DragElement, HitAreasGenerator} = drag_and_drop_handler\n\n\n$ = jQuery\n\n\nclass JqTreeWidget extends MouseWidget\n    BorderDropHint: BorderDropHint\n    DragElement: DragElement\n    DragAndDropHandler: DragAndDropHandler\n    ElementsRenderer: ElementsRenderer\n    GhostDropHint: GhostDropHint\n    HitAreasGenerator: HitAreasGenerator\n    Node: Node\n    SaveStateHandler: SaveStateHandler\n    ScrollHandler: ScrollHandler\n    SelectNodeHandler: SelectNodeHandler\n\n    defaults:\n        autoOpen: false  # true / false / int (open n levels starting at 0)\n        saveState: false  # true / false / string (cookie name)\n        dragAndDrop: false\n        selectable: true\n        useContextMenu: true\n        onCanSelectNode: null\n        onSetStateFromStorage: null\n        onGetStateFromStorage: null\n        onCreateLi: null\n        onIsMoveHandle: null\n        onCanMove: null  # Can this node be moved? function(node)\n        onCanMoveTo: null  # Can this node be moved to this position? function(moved_node, target_node, position)\n        onLoadFailed: null\n        autoEscape: true\n        dataUrl: null\n        closedIcon: null  # The symbol to use for a closed node - ► BLACK RIGHT-POINTING POINTER  http://www.fileformat.info/info/unicode/char/25ba/index.htm\n        openedIcon: '&#x25bc;'  # The symbol to use for an open node - ▼ BLACK DOWN-POINTING TRIANGLE  http://www.fileformat.info/info/unicode/char/25bc/index.htm\n        slide: true  # must display slide animation?\n        nodeClass: Node\n        dataFilter: null\n        keyboardSupport: true\n        openFolderDelay: 500  # The delay for opening a folder during drag and drop; the value is in milliseconds\n        rtl: null  # right-to-left support; true / false (default)\n        onDragMove: null\n        onDragStop: null\n        buttonLeft: true\n        onLoading: null\n\n    toggle: (node, slide=null) ->\n        if slide == null\n            slide = @options.slide\n\n        if node.is_open\n            @closeNode(node, slide)\n        else\n            @openNode(node, slide)\n\n        return @element\n\n    getTree: ->\n        return @tree\n\n    selectNode: (node) ->\n        @_selectNode(node, false)\n        return @element\n\n    _selectNode: (node, must_toggle=false) ->\n        if not @select_node_handler\n            return\n\n        canSelect = =>\n            if @options.onCanSelectNode\n                return @options.selectable and @options.onCanSelectNode(node)\n            else\n                return @options.selectable\n\n        openParents = =>\n            parent = node.parent\n\n            if parent and parent.parent and not parent.is_open\n                @openNode(parent, false)\n\n        saveState = =>\n            if @options.saveState\n                @save_state_handler.saveState()\n\n        if not node\n            # Called with empty node -> deselect current node\n            @_deselectCurrentNode()\n            saveState()\n            return\n\n        if not canSelect()\n            return\n\n        if @select_node_handler.isNodeSelected(node)\n            if must_toggle\n                @_deselectCurrentNode()\n                @_triggerEvent(\n                    'tree.select',\n                    node: null,\n                    previous_node: node\n                )\n        else\n            deselected_node = @getSelectedNode()\n            @_deselectCurrentNode()\n            @addToSelection(node)\n            @_triggerEvent('tree.select', node: node, deselected_node: deselected_node)\n            openParents()\n\n        saveState()\n\n    getSelectedNode: ->\n        if @select_node_handler\n            return @select_node_handler.getSelectedNode()\n        else\n            return null\n\n    toJson: ->\n        return JSON.stringify(\n            @tree.getData()\n        )\n\n    loadData: (data, parent_node) ->\n        @_loadData(data, parent_node)\n        return @element\n\n    ###\n    signatures:\n    - loadDataFromUrl(url, parent_node=null, on_finished=null)\n        loadDataFromUrl('/my_data');\n        loadDataFromUrl('/my_data', node1);\n        loadDataFromUrl('/my_data', node1, function() { console.log('finished'); });\n        loadDataFromUrl('/my_data', null, function() { console.log('finished'); });\n\n    - loadDataFromUrl(parent_node=null, on_finished=null)\n        loadDataFromUrl();\n        loadDataFromUrl(node1);\n        loadDataFromUrl(null, function() { console.log('finished'); });\n        loadDataFromUrl(node1, function() { console.log('finished'); });\n    ###\n    loadDataFromUrl: (param1, param2, param3) ->\n        if $.type(param1) == 'string'\n            # first parameter is url\n            @_loadDataFromUrl(param1, param2, param3)\n        else\n            # first parameter is not url\n            @_loadDataFromUrl(null, param1, param2)\n\n        return @element\n\n    reload: (on_finished) ->\n        @_loadDataFromUrl(null, null, on_finished)\n        return @element\n\n    _loadDataFromUrl: (url_info, parent_node, on_finished) ->\n        $el = null\n\n        addLoadingClass = =>\n            if parent_node\n                $el = $(parent_node.element)\n            else\n                $el = @element\n\n            $el.addClass('jqtree-loading')\n            @_notifyLoading(true, parent_node, $el)\n\n        removeLoadingClass = =>\n            if $el\n                $el.removeClass('jqtree-loading')\n\n                @_notifyLoading(false, parent_node, $el)\n\n        parseUrlInfo = ->\n            if $.type(url_info) == 'string'\n                return url: url_info\n\n            if not url_info.method\n                url_info.method = 'get'\n\n            return url_info\n\n        handeLoadData = (data) =>\n            removeLoadingClass()\n            @_loadData(data, parent_node)\n\n            if on_finished and $.isFunction(on_finished)\n                on_finished()\n\n        handleSuccess = (response) =>\n            if $.isArray(response) or typeof response == 'object'\n                data = response\n            else if data?\n                data = $.parseJSON(response)\n            else\n                data = []\n\n            if @options.dataFilter\n                data = @options.dataFilter(data)\n\n            handeLoadData(data)\n\n        handleError = (response) =>\n            removeLoadingClass()\n\n            if @options.onLoadFailed\n                @options.onLoadFailed(response)\n\n        loadDataFromUrlInfo = ->\n            url_info = parseUrlInfo()\n\n            $.ajax(\n                $.extend(\n                    {},\n                    url_info,\n                    {\n                        method: if url_info.method? then url_info.method.toUpperCase() else 'GET',\n                        cache: false,\n                        dataType: 'json',\n                        success: handleSuccess,\n                        error: handleError\n                    }\n                )\n            )\n\n        if not url_info\n            # Generate url for node\n            url_info = @_getDataUrlInfo(parent_node)\n\n        addLoadingClass()\n\n        if not url_info\n            removeLoadingClass()\n            return\n        else if $.isArray(url_info)\n            handeLoadData(url_info)\n            return\n        else\n            loadDataFromUrlInfo()\n            return\n\n    _loadData: (data, parent_node=null) ->\n        deselectNodes = =>\n            if @select_node_handler\n                selected_nodes_under_parent = @select_node_handler.getSelectedNodesUnder(parent_node)\n                for n in selected_nodes_under_parent\n                    @select_node_handler.removeFromSelection(n)\n\n            return null\n\n        loadSubtree = =>\n            parent_node.loadFromData(data)\n\n            parent_node.load_on_demand = false\n            parent_node.is_loading = false\n\n            @_refreshElements(parent_node)\n\n        if not data\n            return\n\n        @_triggerEvent('tree.load_data', tree_data: data)\n\n        if not parent_node\n            @_initTree(data)\n        else\n            deselectNodes()\n            loadSubtree()\n\n        if @isDragging()\n            @dnd_handler.refresh()\n\n    getNodeById: (node_id) ->\n        return @tree.getNodeById(node_id)\n\n    getNodeByName: (name) ->\n        return @tree.getNodeByName(name)\n\n    getNodesByProperty: (key, value) ->\n        return @tree.getNodesByProperty(key, value)\n\n    getNodeByHtmlElement: (element) ->\n        return @_getNode($(element))\n\n    getNodeByCallback: (callback) ->\n        return @tree.getNodeByCallback(callback)\n\n    openNode: (node, slide_param=null, on_finished_param=null) ->\n        parseParams = =>\n            if isFunction(slide_param)\n                on_finished = slide_param\n                slide = null\n            else\n                slide = slide_param\n                on_finished = on_finished_param\n\n            if slide == null\n                slide = @options.slide\n\n            return [slide, on_finished]\n\n        [slide, on_finished] = parseParams()\n\n        if node\n            @_openNode(node, slide, on_finished)\n\n        return @element\n\n    _openNode: (node, slide=true, on_finished) ->\n        doOpenNode = (_node, _slide, _on_finished) =>\n            folder_element = new FolderElement(_node, this)\n            folder_element.open(_on_finished, _slide)\n\n        if node.isFolder()\n            if node.load_on_demand\n                @_loadFolderOnDemand(node, slide, on_finished)\n            else\n                parent = node.parent\n\n                while parent\n                    # nb: do not open root element\n                    if parent.parent\n                        doOpenNode(parent, false, null)\n                    parent = parent.parent\n\n                doOpenNode(node, slide, on_finished)\n                @_saveState()\n\n    _loadFolderOnDemand: (node, slide=true, on_finished) ->\n        node.is_loading = true\n\n        @_loadDataFromUrl(\n            null,\n            node,\n            =>\n                @_openNode(node, slide, on_finished)\n        )\n\n    closeNode: (node, slide=null) ->\n        if slide == null\n            slide = @options.slide\n\n        if node.isFolder()\n            new FolderElement(node, this).close(slide)\n\n            @_saveState()\n\n        return @element\n\n    isDragging: ->\n        if @dnd_handler\n            return @dnd_handler.is_dragging\n        else\n            return false\n\n    refreshHitAreas: ->\n        @dnd_handler.refresh()\n        return @element\n\n    addNodeAfter: (new_node_info, existing_node) ->\n        new_node = existing_node.addAfter(new_node_info)\n        @_refreshElements(existing_node.parent)\n        return new_node\n\n    addNodeBefore: (new_node_info, existing_node) ->\n        new_node = existing_node.addBefore(new_node_info)\n        @_refreshElements(existing_node.parent)\n        return new_node\n\n    addParentNode: (new_node_info, existing_node) ->\n        new_node = existing_node.addParent(new_node_info)\n        @_refreshElements(new_node.parent)\n        return new_node\n\n    removeNode: (node) ->\n        parent = node.parent\n        if parent\n            @select_node_handler.removeFromSelection(node, true)  # including children\n\n            node.remove()\n            @_refreshElements(parent)\n\n        return @element\n\n    appendNode: (new_node_info, parent_node) ->\n        parent_node = parent_node or @tree\n\n        node = parent_node.append(new_node_info)\n\n        @_refreshElements(parent_node)\n\n        return node\n\n    prependNode: (new_node_info, parent_node) ->\n        if not parent_node\n            parent_node = @tree\n\n        node = parent_node.prepend(new_node_info)\n\n        @_refreshElements(parent_node)\n\n        return node\n\n    updateNode: (node, data) ->\n        id_is_changed = data.id and data.id != node.id\n\n        if id_is_changed\n            @tree.removeNodeFromIndex(node)\n\n        node.setData(data)\n\n        if id_is_changed\n            @tree.addNodeToIndex(node)\n\n        if typeof data == 'object' and data.children\n            node.removeChildren()\n\n            if data.children.length\n                node.loadFromData(data.children)\n\n        @renderer.renderFromNode(node)\n        @_selectCurrentNode()\n\n        return @element\n\n    moveNode: (node, target_node, position) ->\n        position_index = Position.nameToIndex(position)\n\n        @tree.moveNode(node, target_node, position_index)\n        @_refreshElements()\n        return @element\n\n    getStateFromStorage: ->\n        return @save_state_handler.getStateFromStorage()\n\n    addToSelection: (node) ->\n        if node\n            @select_node_handler.addToSelection(node)\n\n            @_getNodeElementForNode(node).select()\n            @_saveState()\n\n        return @element\n\n    getSelectedNodes: ->\n        return @select_node_handler.getSelectedNodes()\n\n    isNodeSelected: (node) ->\n        return @select_node_handler.isNodeSelected(node)\n\n    removeFromSelection: (node) ->\n        @select_node_handler.removeFromSelection(node)\n\n        @_getNodeElementForNode(node).deselect()\n        @_saveState()\n        return @element\n\n    scrollToNode: (node) ->\n        $element = $(node.element)\n        top = $element.offset().top - @$el.offset().top\n\n        @scroll_handler.scrollTo(top)\n        return @element\n\n    getState: ->\n        return @save_state_handler.getState()\n\n    setState: (state) ->\n        @save_state_handler.setInitialState(state)\n        @_refreshElements()\n        return @element\n\n    setOption: (option, value) ->\n        @options[option] = value\n        return @element\n\n    moveDown: ->\n        if @key_handler\n            @key_handler.moveDown()\n\n        return @element\n\n    moveUp: ->\n        if @key_handler\n            @key_handler.moveUp()\n\n        return @element\n\n    getVersion: ->\n        return __version__\n\n    _init: ->\n        super()\n\n        @element = @$el\n        @mouse_delay = 300\n        @is_initialized = false\n\n        @options.rtl = @_getRtlOption()\n\n        if !@options.closedIcon\n            @options.closedIcon = @_getDefaultClosedIcon()\n\n        @renderer = new ElementsRenderer(this)\n\n        if SaveStateHandler?\n            @save_state_handler = new SaveStateHandler(this)\n        else\n            @options.saveState = false\n\n        if SelectNodeHandler?\n            @select_node_handler = new SelectNodeHandler(this)\n\n        if DragAndDropHandler?\n            @dnd_handler = new DragAndDropHandler(this)\n        else\n            @options.dragAndDrop = false\n\n        if ScrollHandler?\n            @scroll_handler = new ScrollHandler(this)\n\n        if KeyHandler? and SelectNodeHandler?\n            @key_handler = new KeyHandler(this)\n\n        @_initData()\n\n        @element.click($.proxy(@_click, this))\n        @element.dblclick($.proxy(@_dblclick, this))\n\n        if @options.useContextMenu\n            @element.on('contextmenu', $.proxy(@_contextmenu, this))\n\n    _deinit: ->\n        @element.empty()\n        @element.off()\n\n        if @key_handler\n            @key_handler.deinit()\n\n        @tree = null\n\n        super()\n\n    _initData: ->\n        if @options.data\n            @_loadData(@options.data)\n        else\n            data_url = @_getDataUrlInfo()\n\n            if data_url\n                @_loadDataFromUrl()\n            else\n                @_loadData([])\n\n    _getDataUrlInfo: (node) ->\n        data_url = @options.dataUrl or @element.data('url')\n\n        getUrlFromString = =>\n            url_info = url: data_url\n\n            if node and node.id\n                # Load on demand of a subtree; add node parameter\n                data = node: node.id\n                url_info['data'] = data\n            else\n                # Add selected_node parameter\n                selected_node_id = @_getNodeIdToBeSelected()\n                if selected_node_id\n                    data = selected_node: selected_node_id\n                    url_info['data'] = data\n\n            return url_info\n\n        if $.isFunction(data_url)\n            return data_url(node)\n        else if $.type(data_url) == 'string'\n            return getUrlFromString()\n        else\n            return data_url\n\n    _getNodeIdToBeSelected: ->\n        if @options.saveState\n            return @save_state_handler.getNodeIdToBeSelected()\n        else\n            return null\n\n    _initTree: (data) ->\n        doInit = =>\n            if not @is_initialized\n                @is_initialized = true\n                @_triggerEvent('tree.init')\n\n        @tree = new @options.nodeClass(null, true, @options.nodeClass)\n\n        if @select_node_handler\n            @select_node_handler.clear()\n\n        @tree.loadFromData(data)\n\n        must_load_on_demand = @_setInitialState()\n\n        @_refreshElements()\n\n        if not must_load_on_demand\n            doInit()\n        else\n            # Load data on demand and then init the tree\n            @_setInitialStateOnDemand(doInit)\n\n    # Set initial state, either by restoring the state or auto-opening nodes\n    # result: must load nodes on demand?\n    _setInitialState: ->\n        restoreState = =>\n            # result: is state restored, must load on demand?\n            if not (@options.saveState and @save_state_handler)\n                return [false, false]\n            else\n                state = @save_state_handler.getStateFromStorage()\n\n                if not state\n                    return [false, false]\n                else\n                    must_load_on_demand = @save_state_handler.setInitialState(state)\n\n                    # return true: the state is restored\n                    return [true, must_load_on_demand]\n\n        autoOpenNodes = =>\n            # result: must load on demand?\n            if @options.autoOpen is false\n                return false\n\n            max_level = @_getAutoOpenMaxLevel()\n            must_load_on_demand = false\n\n            @tree.iterate (node, level) ->\n                if node.load_on_demand\n                    must_load_on_demand = true\n                    return false\n                else if not node.hasChildren()\n                    return false\n                else\n                    node.is_open = true\n                    return (level != max_level)\n\n            return must_load_on_demand\n\n        [is_restored, must_load_on_demand] = restoreState()\n\n        if not is_restored\n            must_load_on_demand = autoOpenNodes()\n\n        return must_load_on_demand\n\n    # Set the initial state for nodes that are loaded on demand\n    # Call cb_finished when done\n    _setInitialStateOnDemand: (cb_finished) ->\n        restoreState = =>\n            if not (@options.saveState and @save_state_handler)\n                return false\n            else\n                state = @save_state_handler.getStateFromStorage()\n\n                if not state\n                    return false\n                else\n                    @save_state_handler.setInitialStateOnDemand(state, cb_finished)\n\n                    return true\n\n        autoOpenNodes = =>\n            max_level = @_getAutoOpenMaxLevel()\n            loading_count = 0\n\n            loadAndOpenNode = (node) =>\n                loading_count += 1\n                @_openNode(\n                    node,\n                    false,\n                    ->\n                        loading_count -= 1\n                        openNodes()\n                )\n\n            openNodes = =>\n                @tree.iterate (node, level) =>\n                    if node.load_on_demand\n                        if not node.is_loading\n                            loadAndOpenNode(node)\n\n                        return false\n                    else\n                        @_openNode(node, false)\n\n                        return (level != max_level)\n\n                if loading_count == 0\n                    cb_finished()\n\n            openNodes()\n\n        if not restoreState()\n            autoOpenNodes()\n\n    _getAutoOpenMaxLevel: ->\n        if @options.autoOpen is true\n            return -1\n        else\n            return parseInt(@options.autoOpen)\n\n    ###\n    Redraw the tree or part of the tree.\n    # from_node: redraw this subtree\n    ###\n    _refreshElements: (from_node=null) ->\n        @renderer.render(from_node)\n\n        @_triggerEvent('tree.refresh')\n\n    _click: (e) ->\n        click_target = @_getClickTarget(e.target)\n\n        if click_target\n            if click_target.type == 'button'\n                @toggle(click_target.node, @options.slide)\n\n                e.preventDefault()\n                e.stopPropagation()\n            else if click_target.type == 'label'\n                node = click_target.node\n                event = @_triggerEvent(\n                    'tree.click',\n                        node: node\n                        click_event: e\n                )\n\n                if not event.isDefaultPrevented()\n                    @_selectNode(node, true)\n\n    _dblclick: (e) ->\n        click_target = @_getClickTarget(e.target)\n\n        if click_target and click_target.type == 'label'\n            @_triggerEvent(\n                'tree.dblclick',\n                    node: click_target.node\n                    click_event: e\n            )\n\n    _getClickTarget: (element) ->\n        $target = $(element)\n\n        $button = $target.closest('.jqtree-toggler')\n\n        if $button.length\n            node = @_getNode($button)\n\n            if node\n                return {\n                    type: 'button',\n                    node: node\n                }\n        else\n            $el = $target.closest('.jqtree-element')\n            if $el.length\n                node = @_getNode($el)\n                if node\n                    return {\n                        type: 'label',\n                        node: node\n                    }\n\n        return null\n\n    _getNode: ($element) ->\n        $li = $element.closest('li.jqtree_common')\n        if $li.length == 0\n            return null\n        else\n            return $li.data('node')\n\n    _getNodeElementForNode: (node) ->\n        if node.isFolder()\n            return new FolderElement(node, this)\n        else\n            return new NodeElement(node, this)\n\n    _getNodeElement: ($element) ->\n        node = @_getNode($element)\n        if node\n            return @_getNodeElementForNode(node)\n        else\n            return null\n\n    _contextmenu: (e) ->\n        $div = $(e.target).closest('ul.jqtree-tree .jqtree-element')\n        if $div.length\n            node = @_getNode($div)\n            if node\n                e.preventDefault()\n                e.stopPropagation()\n\n                @_triggerEvent(\n                    'tree.contextmenu',\n                        node: node\n                        click_event: e\n                )\n                return false\n\n    _saveState: ->\n        if @options.saveState\n            @save_state_handler.saveState()\n\n    _mouseCapture: (position_info) ->\n        if @options.dragAndDrop\n            return @dnd_handler.mouseCapture(position_info)\n        else\n            return false\n\n    _mouseStart: (position_info) ->\n        if @options.dragAndDrop\n            return @dnd_handler.mouseStart(position_info)\n        else\n            return false\n\n    _mouseDrag: (position_info) ->\n        if @options.dragAndDrop\n            result = @dnd_handler.mouseDrag(position_info)\n\n            if @scroll_handler\n                @scroll_handler.checkScrolling()\n            return result\n        else\n            return false\n\n    _mouseStop: (position_info) ->\n        if @options.dragAndDrop\n            return @dnd_handler.mouseStop(position_info)\n        else\n            return false\n\n    _triggerEvent: (event_name, values) ->\n        event = $.Event(event_name)\n        $.extend(event, values)\n\n        @element.trigger(event)\n        return event\n\n    testGenerateHitAreas: (moving_node) ->\n        @dnd_handler.current_item = @_getNodeElementForNode(moving_node)\n        @dnd_handler.generateHitAreas()\n        return @dnd_handler.hit_areas\n\n    _selectCurrentNode: ->\n        node = @getSelectedNode()\n        if node\n            node_element = @_getNodeElementForNode(node)\n            if node_element\n                node_element.select()\n\n    _deselectCurrentNode: ->\n        node = @getSelectedNode()\n        if node\n            @removeFromSelection(node)\n\n    _getDefaultClosedIcon: ->\n        if @options.rtl\n            # triangle to the left\n            return '&#x25c0;'\n        else\n            # triangle to the right\n            return '&#x25ba;'\n\n    _getRtlOption: ->\n        if @options.rtl != null\n            return @options.rtl\n        else\n            data_rtl = @element.data('rtl')\n\n            if data_rtl? and data_rtl != false\n                return true\n            else\n                return false\n\n    _notifyLoading: (is_loading, node, $el) ->\n        if @options.onLoading\n            @options.onLoading(is_loading, node, $el)\n\n\nJqTreeWidget.getModule = (name) ->\n    modules =\n        'node': node_module\n        'util': util_module\n        'drag_and_drop_handler': drag_and_drop_handler\n\n    return modules[name]\n\n\nSimpleWidget.register(JqTreeWidget, 'tree')\n\n\n\n// WEBPACK FOOTER //\n// ./src/tree.jquery.coffee","node_module = require './node'\nutil = require './util'\n\nPosition = node_module.Position\n\n$ = jQuery\n\n\nclass DragAndDropHandler\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n\n        @hovered_area = null\n        @$ghost = null\n        @hit_areas = []\n        @is_dragging = false\n        @current_item = null\n\n    mouseCapture: (position_info) ->\n        $element = $(position_info.target)\n\n        if not @mustCaptureElement($element)\n            return null\n\n        if @tree_widget.options.onIsMoveHandle and not @tree_widget.options.onIsMoveHandle($element)\n            return null\n\n        node_element = @tree_widget._getNodeElement($element)\n\n        if node_element and @tree_widget.options.onCanMove\n            if not @tree_widget.options.onCanMove(node_element.node)\n                node_element = null\n\n        @current_item = node_element\n        return (@current_item != null)\n\n    mouseStart: (position_info) ->\n        @refresh()\n\n        offset = $(position_info.target).offset()\n\n        node = @current_item.node\n\n        if @tree_widget.options.autoEscape\n            node_name = util.html_escape(node.name)\n        else\n            node_name = node.name\n\n        @drag_element = new DragElement(\n            node_name,\n            position_info.page_x - offset.left,\n            position_info.page_y - offset.top,\n            @tree_widget.element\n        )\n\n        @is_dragging = true\n        @current_item.$element.addClass('jqtree-moving')\n        return true\n\n    mouseDrag: (position_info) ->\n        @drag_element.move(position_info.page_x, position_info.page_y)\n\n        area = @findHoveredArea(position_info.page_x, position_info.page_y)\n        can_move_to = @canMoveToArea(area)\n\n        if can_move_to and area\n            if !area.node.isFolder()\n                @stopOpenFolderTimer()\n\n            if @hovered_area != area\n                @hovered_area = area\n\n                # If this is a closed folder, start timer to open it\n                if @mustOpenFolderTimer(area)\n                    @startOpenFolderTimer(area.node)\n                else\n                    @stopOpenFolderTimer()\n\n                @updateDropHint()\n        else\n            @removeHover()\n            @removeDropHint()\n            @stopOpenFolderTimer()\n\n        if not area\n            if @tree_widget.options.onDragMove?\n                @tree_widget.options.onDragMove(@current_item.node, position_info.original_event)\n\n        return true\n\n    mustCaptureElement: ($element) ->\n        return not $element.is('input,select,textarea')\n\n    canMoveToArea: (area) ->\n        if not area\n            return false\n        else if @tree_widget.options.onCanMoveTo\n            position_name = Position.getName(area.position)\n\n            return @tree_widget.options.onCanMoveTo(@current_item.node, area.node, position_name)\n        else\n            return true\n\n    mouseStop: (position_info) ->\n        @moveItem(position_info)\n        @clear()\n        @removeHover()\n        @removeDropHint()\n        @removeHitAreas()\n\n        current_item = @current_item\n\n        if @current_item\n            @current_item.$element.removeClass('jqtree-moving')\n            @current_item = null\n\n        @is_dragging = false\n\n        if not @hovered_area and current_item\n            if @tree_widget.options.onDragStop?\n                @tree_widget.options.onDragStop(current_item.node, position_info.original_event)\n\n        return false\n\n    refresh: ->\n        @removeHitAreas()\n\n        if @current_item\n            @generateHitAreas()\n\n            @current_item = @tree_widget._getNodeElementForNode(@current_item.node)\n\n            if @is_dragging\n                @current_item.$element.addClass('jqtree-moving')\n\n    removeHitAreas: ->\n        @hit_areas = []\n\n    clear: ->\n        @drag_element.remove()\n        @drag_element = null\n\n    removeDropHint: ->\n        if @previous_ghost\n            @previous_ghost.remove()\n\n    removeHover: ->\n        @hovered_area = null\n\n    generateHitAreas: ->\n        hit_areas_generator = new HitAreasGenerator(\n            @tree_widget.tree,\n            @current_item.node,\n            @getTreeDimensions().bottom\n        )\n        @hit_areas = hit_areas_generator.generate()\n\n    findHoveredArea: (x, y) ->\n        dimensions = @getTreeDimensions()\n\n        if (\n            x < dimensions.left or\n            y < dimensions.top or\n            x > dimensions.right or\n            y > dimensions.bottom\n        )\n            return null\n\n        low = 0\n        high = @hit_areas.length\n        while (low < high)\n            mid = (low + high) >> 1\n            area = @hit_areas[mid]\n\n            if y < area.top\n                high = mid\n            else if y > area.bottom\n                low = mid + 1\n            else\n                return area\n\n        return null\n\n    mustOpenFolderTimer: (area) ->\n        node = area.node\n\n        return (\n            node.isFolder() and\n            not node.is_open and\n            area.position == Position.INSIDE\n        )\n\n    updateDropHint: ->\n        if not @hovered_area\n            return\n\n        # remove previous drop hint\n        @removeDropHint()\n\n        # add new drop hint\n        node_element = @tree_widget._getNodeElementForNode(@hovered_area.node)\n        @previous_ghost = node_element.addDropHint(@hovered_area.position)\n\n    startOpenFolderTimer: (folder) ->\n        openFolder = =>\n            @tree_widget._openNode(\n                folder,\n                @tree_widget.options.slide,\n                =>\n                    @refresh()\n                    @updateDropHint()\n            )\n\n        @stopOpenFolderTimer()\n\n        @open_folder_timer = setTimeout(openFolder, @tree_widget.options.openFolderDelay)\n\n    stopOpenFolderTimer: ->\n        if @open_folder_timer\n            clearTimeout(@open_folder_timer)\n            @open_folder_timer = null\n\n    moveItem: (position_info) ->\n        if (\n            @hovered_area and\n            @hovered_area.position != Position.NONE and\n            @canMoveToArea(@hovered_area)\n        )\n            moved_node = @current_item.node\n            target_node = @hovered_area.node\n            position = @hovered_area.position\n            previous_parent = moved_node.parent\n\n            if position == Position.INSIDE\n                @hovered_area.node.is_open = true\n\n            doMove = =>\n                @tree_widget.tree.moveNode(moved_node, target_node, position)\n                @tree_widget.element.empty()\n                @tree_widget._refreshElements()\n\n            event = @tree_widget._triggerEvent(\n                'tree.move',\n                move_info:\n                    moved_node: moved_node\n                    target_node: target_node\n                    position: Position.getName(position)\n                    previous_parent: previous_parent\n                    do_move: doMove\n                    original_event: position_info.original_event\n            )\n\n            doMove() unless event.isDefaultPrevented()\n\n    getTreeDimensions: ->\n        # Return the dimensions of the tree. Add a margin to the bottom to allow\n        # for some to drag-and-drop the last element.\n        offset = @tree_widget.element.offset()\n\n        return {\n            left: offset.left,\n            top: offset.top,\n            right: offset.left + @tree_widget.element.width(),\n            bottom: offset.top + @tree_widget.element.height() + 16\n        }\n\n\nclass VisibleNodeIterator\n    constructor: (tree) ->\n        @tree = tree\n\n    iterate: ->\n        is_first_node = true\n\n        _iterateNode = (node, next_node) =>\n            must_iterate_inside = (\n                (node.is_open or not node.element) and node.hasChildren()\n            )\n\n            if node.element\n                $element = $(node.element)\n\n                if not $element.is(':visible')\n                    return\n\n                if is_first_node\n                    @handleFirstNode(node, $element)\n                    is_first_node = false\n\n                if not node.hasChildren()\n                    @handleNode(node, next_node, $element)\n                else if node.is_open\n                    if not @handleOpenFolder(node, $element)\n                        must_iterate_inside = false\n                else\n                    @handleClosedFolder(node, next_node, $element)\n\n            if must_iterate_inside\n                children_length = node.children.length\n                for child, i in node.children\n                    if i == (children_length - 1)\n                        _iterateNode(node.children[i], null)\n                    else\n                        _iterateNode(node.children[i], node.children[i+1])\n\n                if node.is_open\n                    @handleAfterOpenFolder(node, next_node, $element)\n\n        _iterateNode(@tree, null)\n\n    handleNode: (node, next_node, $element) ->\n        # override\n\n    handleOpenFolder: (node, $element) ->\n        # override\n        # return\n        #   - true: continue iterating\n        #   - false: stop iterating\n\n    handleClosedFolder: (node, next_node, $element) ->\n        # override\n\n    handleAfterOpenFolder: (node, next_node, $element) ->\n        # override\n\n    handleFirstNode: (node, $element) ->\n        # override\n\n\nclass HitAreasGenerator extends VisibleNodeIterator\n    constructor: (tree, current_node, tree_bottom) ->\n        super(tree)\n\n        @current_node = current_node\n        @tree_bottom = tree_bottom\n\n    generate: ->\n        @positions = []\n        @last_top = 0\n\n        @iterate()\n\n        return @generateHitAreas(@positions)\n\n    getTop: ($element) ->\n        return $element.offset().top\n\n    addPosition: (node, position, top) ->\n        area = {\n            top: top\n            node: node\n            position: position\n        }\n\n        @positions.push(area)\n        @last_top = top\n\n    handleNode: (node, next_node, $element) ->\n        top = @getTop($element)\n\n        if node == @current_node\n            # Cannot move inside current item\n            @addPosition(node, Position.NONE, top)\n        else\n            @addPosition(node, Position.INSIDE, top)\n\n        if (\n            next_node == @current_node or\n            node == @current_node\n        )\n            # Cannot move before or after current item\n            @addPosition(node, Position.NONE, top)\n        else\n            @addPosition(node, Position.AFTER, top)\n\n    handleOpenFolder: (node, $element) ->\n        if node == @current_node\n            # Cannot move inside current item\n            # Stop iterating\n            return false\n\n        # Cannot move before current item\n        if node.children[0] != @current_node\n            @addPosition(node, Position.INSIDE, @getTop($element))\n\n        # Continue iterating\n        return true\n\n    handleClosedFolder: (node, next_node, $element) ->\n        top = @getTop($element)\n\n        if node == @current_node\n            # Cannot move after current item\n            @addPosition(node, Position.NONE, top)\n        else\n            @addPosition(node, Position.INSIDE, top)\n\n            # Cannot move before current item\n            if next_node != @current_node\n                @addPosition(node, Position.AFTER, top)\n\n    handleFirstNode: (node, $element) ->\n        if node != @current_node\n            @addPosition(node, Position.BEFORE, @getTop($(node.element)))\n\n    handleAfterOpenFolder: (node, next_node, $element) ->\n        if (\n            node == @current_node.node or\n            next_node == @current_node.node\n        )\n            # Cannot move before or after current item\n            @addPosition(node, Position.NONE, @last_top)\n        else\n            @addPosition(node, Position.AFTER, @last_top)\n\n    generateHitAreas: (positions) ->\n        previous_top = -1\n        group = []\n        hit_areas = []\n\n        for position in positions\n            if position.top != previous_top and group.length\n                if group.length\n                    @generateHitAreasForGroup(\n                        hit_areas,\n                        group,\n                        previous_top,\n                        position.top\n                    )\n\n                previous_top = position.top\n                group = []\n\n            group.push(position)\n\n        @generateHitAreasForGroup(\n            hit_areas,\n            group,\n            previous_top,\n            @tree_bottom\n        )\n\n        return hit_areas\n\n    generateHitAreasForGroup: (hit_areas, positions_in_group, top, bottom) ->\n        # limit positions in group\n        position_count = Math.min(positions_in_group.length, 4)\n\n        area_height = Math.round((bottom - top) / position_count)\n        area_top = top\n\n        i = 0\n        while (i < position_count)\n            position = positions_in_group[i]\n\n            hit_areas.push(\n                top: area_top,\n                bottom: area_top + area_height,\n                node: position.node,\n                position: position.position\n            )\n\n            area_top += area_height\n            i += 1\n\n        return null\n\n\nclass DragElement\n    constructor: (node_name, offset_x, offset_y, $tree) ->\n        @offset_x = offset_x\n        @offset_y = offset_y\n\n        @$element = $(\"<span class=\\\"jqtree-title jqtree-dragging\\\">#{ node_name }</span>\")\n        @$element.css(\"position\", \"absolute\")\n        $tree.append(@$element)\n\n    move: (page_x, page_y) ->\n        @$element.offset(\n            left: page_x - @offset_x,\n            top: page_y - @offset_y\n        )\n\n    remove: ->\n        @$element.remove()\n\n\nmodule.exports =\n    DragAndDropHandler: DragAndDropHandler\n    DragElement: DragElement\n    HitAreasGenerator: HitAreasGenerator\n\n\n\n// WEBPACK FOOTER //\n// ./src/drag_and_drop_handler.coffee","node_element = require './node_element'\nNodeElement = node_element.NodeElement\n\nutil = require './util'\nhtml_escape = util.html_escape\n\n\n$ = jQuery\n\n\nclass ElementsRenderer\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n\n        @opened_icon_element = @createButtonElement(tree_widget.options.openedIcon)\n        @closed_icon_element = @createButtonElement(tree_widget.options.closedIcon)\n\n    render: (from_node) ->\n        if from_node and from_node.parent\n            @renderFromNode(from_node)\n        else\n            @renderFromRoot()\n\n    renderFromRoot: ->\n        $element = @tree_widget.element\n        $element.empty()\n\n        @createDomElements($element[0], @tree_widget.tree.children, true, true, 1)\n\n    renderFromNode: (node) ->\n        # remember current li\n        $previous_li = $(node.element)\n\n        # create element\n        li = @createLi(node, node.getLevel())\n        @attachNodeData(node, li)\n\n        # add element to dom\n        $previous_li.after(li)\n\n        # remove previous li\n        $previous_li.remove()\n\n        # create children\n        if node.children\n            @createDomElements(li, node.children, false, false, node.getLevel() + 1)\n\n    createDomElements: (element, children, is_root_node, is_open, level) ->\n        ul = @createUl(is_root_node)\n        element.appendChild(ul)\n\n        for child in children\n            li = @createLi(child, level)\n            ul.appendChild(li)\n\n            @attachNodeData(child, li)\n\n            if child.hasChildren()\n                @createDomElements(li, child.children, false, child.is_open, level + 1)\n\n        return null\n\n    attachNodeData: (node, li) ->\n        node.element = li\n        $(li).data('node', node)\n\n    createUl: (is_root_node) ->\n        if !is_root_node\n            class_string = ''\n            role = 'group'\n        else\n            class_string = 'jqtree-tree'\n            role = 'tree'\n\n            if @tree_widget.options.rtl\n                class_string += ' jqtree-rtl'\n\n        ul = document.createElement('ul')\n        ul.className = \"jqtree_common #{ class_string }\"\n\n        ul.setAttribute('role', role)\n\n        return ul\n\n    createLi: (node, level) ->\n        is_selected = @tree_widget.select_node_handler and @tree_widget.select_node_handler.isNodeSelected(node)\n\n        if node.isFolder()\n            li = @createFolderLi(node, level, is_selected)\n        else\n            li = @createNodeLi(node, level, is_selected)\n\n        if @tree_widget.options.onCreateLi\n            @tree_widget.options.onCreateLi(node, $(li))\n\n        return li\n\n    createFolderLi: (node, level, is_selected) ->\n        button_classes = @getButtonClasses(node)\n        folder_classes = @getFolderClasses(node, is_selected)\n\n        if node.is_open\n            icon_element = @opened_icon_element\n        else\n            icon_element = @closed_icon_element\n\n        # li\n        li = document.createElement('li')\n        li.className = \"jqtree_common #{ folder_classes }\"\n        li.setAttribute('role', 'presentation')\n\n        # div\n        div = document.createElement('div')\n        div.className = \"jqtree-element jqtree_common\"\n        div.setAttribute('role', 'presentation')\n\n        li.appendChild(div)\n\n        # button link\n        button_link = document.createElement('a')\n        button_link.className = button_classes\n\n        button_link.appendChild(\n            icon_element.cloneNode(false)\n        )\n\n        button_link.setAttribute('role', 'presentation')\n        button_link.setAttribute('aria-hidden', 'true')\n\n        if @tree_widget.options.buttonLeft\n            div.appendChild(button_link)\n\n        # title span\n        div.appendChild(\n            @createTitleSpan(node.name, level, is_selected, node.is_open, is_folder=true)\n        )\n\n        if not @tree_widget.options.buttonLeft\n            div.appendChild(button_link)\n\n        return li\n\n    createNodeLi: (node, level, is_selected) ->\n        li_classes = ['jqtree_common']\n\n        if is_selected\n            li_classes.push('jqtree-selected')\n\n        class_string = li_classes.join(' ')\n\n        # li\n        li = document.createElement('li')\n        li.className = class_string\n        li.setAttribute('role', 'presentation')\n\n        # div\n        div = document.createElement('div')\n        div.className = \"jqtree-element jqtree_common\"\n        div.setAttribute('role', 'presentation')\n\n        li.appendChild(div)\n\n        # title span\n        div.appendChild(\n            @createTitleSpan(node.name, level, is_selected, node.is_open, is_folder=false)\n        )\n\n        return li\n\n    createTitleSpan: (node_name, level, is_selected, is_open, is_folder) ->\n        title_span = document.createElement('span')\n\n        classes = \"jqtree-title jqtree_common\"\n\n        if is_folder\n            classes += \" jqtree-title-folder\"\n\n        title_span.className = classes\n\n        title_span.setAttribute('role', 'treeitem')\n        title_span.setAttribute('aria-level', level)\n\n        title_span.setAttribute('aria-selected', util.getBoolString(is_selected))\n        title_span.setAttribute('aria-expanded', util.getBoolString(is_open))\n\n        if is_selected\n            title_span.setAttribute('tabindex', 0)\n\n        title_span.innerHTML = @escapeIfNecessary(node_name)\n\n        return title_span\n\n    getButtonClasses: (node) ->\n        classes = ['jqtree-toggler', 'jqtree_common']\n\n        if not node.is_open\n            classes.push('jqtree-closed')\n\n        if @tree_widget.options.buttonLeft\n            classes.push('jqtree-toggler-left')\n        else\n            classes.push('jqtree-toggler-right')\n\n        return classes.join(' ')\n\n    getFolderClasses: (node, is_selected) ->\n        classes = ['jqtree-folder']\n\n        if not node.is_open\n            classes.push('jqtree-closed')\n\n        if is_selected\n            classes.push('jqtree-selected')\n\n        if node.is_loading\n            classes.push('jqtree-loading')\n\n        return classes.join(' ')\n\n    escapeIfNecessary: (value) ->\n        if @tree_widget.options.autoEscape\n            return html_escape(value)\n        else\n            return value\n\n    createButtonElement: (value) ->\n        if typeof value == 'string'\n            # convert value to html\n            div = document.createElement('div')\n            div.innerHTML = value\n\n            return document.createTextNode(div.innerHTML)\n        else\n            return $(value)[0]\n\n\nmodule.exports = ElementsRenderer\n\n\n\n// WEBPACK FOOTER //\n// ./src/elements_renderer.coffee","$ = jQuery\n\n\nclass KeyHandler\n    LEFT = 37\n    UP = 38\n    RIGHT = 39\n    DOWN = 40\n\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n\n        if tree_widget.options.keyboardSupport\n            $(document).on('keydown.jqtree', $.proxy(@handleKeyDown, this))\n\n    deinit: ->\n        $(document).off('keydown.jqtree')\n\n    moveDown: ->\n        node = @tree_widget.getSelectedNode()\n\n        if node\n            return @selectNode(node.getNextNode())\n        else\n            return false\n\n    moveUp: ->\n        node = @tree_widget.getSelectedNode()\n\n        if node\n            return @selectNode(node.getPreviousNode())\n        else\n            return false\n\n    moveRight: ->\n        node = @tree_widget.getSelectedNode()\n\n        if not node\n            return true\n        else if not node.isFolder()\n            return true\n        else\n            # folder node\n            if node.is_open\n                # Right moves to the first child of an open node\n                return @selectNode(node.getNextNode())\n            else\n                # Right expands a closed node\n                @tree_widget.openNode(node)\n                return false\n\n    moveLeft: ->\n        node = @tree_widget.getSelectedNode()\n\n        if not node\n            return true\n        else if node.isFolder() and node.is_open\n            # Left on an open node closes the node\n            @tree_widget.closeNode(node)\n            return false\n        else\n            # Left on a closed or end node moves focus to the node's parent\n            return @selectNode(node.getParent())\n\n    handleKeyDown: (e) ->\n        if not @tree_widget.options.keyboardSupport\n            return true\n\n        if $(document.activeElement).is('textarea,input,select')\n            return true\n\n        if not @tree_widget.getSelectedNode()\n            return true\n\n        key = e.which\n\n        switch key\n            when DOWN\n                return @moveDown()\n\n            when UP\n                return @moveUp()\n\n            when RIGHT\n                return @moveRight()\n\n            when LEFT\n                return @moveLeft()\n\n        return true\n\n    selectNode: (node) =>\n        if not node\n            return true\n        else\n            @tree_widget.selectNode(node)\n\n            if (\n                @tree_widget.scroll_handler and\n                (not @tree_widget.scroll_handler.isScrolledIntoView($(node.element).find('.jqtree-element')))\n            )\n                @tree_widget.scrollToNode(node)\n\n            return false\n\n\nmodule.exports = KeyHandler\n\n\n\n// WEBPACK FOOTER //\n// ./src/key_handler.coffee","###\nThis widget does the same a the mouse widget in jqueryui.\n###\n\nSimpleWidget = require './simple.widget'\n\n\n$ = jQuery\n\n\nclass MouseWidget extends SimpleWidget\n    @is_mouse_handled = false\n\n    _init: ->\n        @$el.on('mousedown.mousewidget', $.proxy(@_mouseDown, this))\n        @$el.on('touchstart.mousewidget', $.proxy(@_touchStart, this))\n\n        @is_mouse_started = false\n        @mouse_delay = 0\n        @_mouse_delay_timer = null\n        @_is_mouse_delay_met = true\n        @mouse_down_info = null\n\n    _deinit: ->\n        @$el.off('mousedown.mousewidget')\n        @$el.off('touchstart.mousewidget')\n\n        $document = $(document)\n        $document.off('mousemove.mousewidget')\n        $document.off('mouseup.mousewidget')\n\n    _mouseDown: (e) ->\n        # Is left mouse button?\n        if e.which != 1\n            return\n\n        result = @_handleMouseDown(\n            e,\n            @_getPositionInfo(e)\n        )\n\n        if result\n            e.preventDefault()\n\n        return result\n\n    _handleMouseDown: (e, position_info) ->\n        # Don't let more than one widget handle mouseStart\n        if MouseWidget.is_mouse_handled\n            return\n\n        # We may have missed mouseup (out of window)\n        if @is_mouse_started\n            @_handleMouseUp(position_info)\n\n        @mouse_down_info = position_info\n\n        if not @_mouseCapture(position_info)\n            return\n\n        @_handleStartMouse()\n\n        @is_mouse_handled = true\n        return true\n\n    _handleStartMouse: ->\n        $document = $(document)\n        $document.on('mousemove.mousewidget', $.proxy(@_mouseMove, this))\n        $document.on('touchmove.mousewidget', $.proxy(@_touchMove, this))\n        $document.on('mouseup.mousewidget', $.proxy(@_mouseUp, this))\n        $document.on('touchend.mousewidget', $.proxy(@_touchEnd, this))\n\n        if @mouse_delay\n            @_startMouseDelayTimer()\n\n    _startMouseDelayTimer: ->\n        if @_mouse_delay_timer\n            clearTimeout(@_mouse_delay_timer)\n\n        @_mouse_delay_timer = setTimeout(\n            =>\n                @_is_mouse_delay_met = true\n            , @mouse_delay\n        )\n\n        @_is_mouse_delay_met = false\n\n    _mouseMove: (e) ->\n        return @_handleMouseMove(\n            e,\n            @_getPositionInfo(e)\n        )\n\n    _handleMouseMove: (e, position_info) ->\n        if @is_mouse_started\n            @_mouseDrag(position_info)\n            return e.preventDefault()\n\n        if @mouse_delay and not @_is_mouse_delay_met\n            return true\n\n        @is_mouse_started = @_mouseStart(@mouse_down_info) != false\n\n        if @is_mouse_started\n            @_mouseDrag(position_info)\n        else\n            @_handleMouseUp(position_info)\n\n        return not @is_mouse_started\n\n    _getPositionInfo: (e) ->\n        return {\n            page_x: e.pageX,\n            page_y: e.pageY,\n            target: e.target,\n            original_event: e\n        }\n\n    _mouseUp: (e) ->\n        return @_handleMouseUp(\n            @_getPositionInfo(e)\n        )\n\n    _handleMouseUp: (position_info) ->\n        $document = $(document)\n        $document.off('mousemove.mousewidget')\n        $document.off('touchmove.mousewidget')\n        $document.off('mouseup.mousewidget')\n        $document.off('touchend.mousewidget')\n\n        if @is_mouse_started\n            @is_mouse_started = false\n            @_mouseStop(position_info)\n\n        return\n\n    _mouseCapture: (position_info) ->\n        return true\n\n    _mouseStart: (position_info) ->\n        null\n\n    _mouseDrag: (position_info) ->\n        null\n\n    _mouseStop: (position_info) ->\n        null\n\n    setMouseDelay: (mouse_delay) ->\n        @mouse_delay = mouse_delay\n\n    _touchStart: (e) ->\n        if e.originalEvent.touches.length > 1\n            return\n\n        touch = e.originalEvent.changedTouches[0]\n\n        return @_handleMouseDown(\n            e,\n            @_getPositionInfo(touch)\n        )\n\n    _touchMove: (e) ->\n        if e.originalEvent.touches.length > 1\n            return\n\n        touch = e.originalEvent.changedTouches[0]\n\n        return @_handleMouseMove(\n            e,\n            @_getPositionInfo(touch)\n        )\n\n    _touchEnd: (e) ->\n        if e.originalEvent.touches.length > 1\n            return\n\n        touch = e.originalEvent.changedTouches[0]\n\n        return @_handleMouseUp(\n            @_getPositionInfo(touch)\n        )\n\nmodule.exports = MouseWidget\n\n\n\n// WEBPACK FOOTER //\n// ./src/mouse.widget.coffee","util = require './util'\n\nindexOf = util.indexOf\nisInt = util.isInt\n\n\n$ = jQuery\n\n\nclass SaveStateHandler\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n\n    saveState: ->\n        state = JSON.stringify(@getState())\n\n        if @tree_widget.options.onSetStateFromStorage\n            @tree_widget.options.onSetStateFromStorage(state)\n        else if @supportsLocalStorage()\n            localStorage.setItem(\n                @getCookieName(),\n                state\n            )\n        else if $.cookie\n            $.cookie.raw = true\n            $.cookie(\n                @getCookieName(),\n                state,\n                {path: '/'}\n            )\n\n    getStateFromStorage: ->\n        json_data = @_loadFromStorage()\n\n        if json_data\n            return @_parseState(json_data)\n        else\n            return null\n\n    _parseState: (json_data) ->\n        state = $.parseJSON(json_data)\n\n        # Check if selected_node is an int (instead of an array)\n        if state and state.selected_node and isInt(state.selected_node)\n            # Convert to array\n            state.selected_node = [state.selected_node]\n\n        return state\n\n    _loadFromStorage: ->\n        if @tree_widget.options.onGetStateFromStorage\n            return @tree_widget.options.onGetStateFromStorage()\n        else if @supportsLocalStorage()\n            return localStorage.getItem(\n                @getCookieName()\n            )\n        else if $.cookie\n            $.cookie.raw = true\n            return $.cookie(@getCookieName())\n        else\n            return null\n\n    getState: ->\n        getOpenNodeIds = =>\n            open_nodes = []\n\n            @tree_widget.tree.iterate((node) ->\n                if (\n                    node.is_open and\n                    node.id and\n                    node.hasChildren()\n                )\n                    open_nodes.push(node.id)\n                return true\n            )\n\n            return open_nodes\n\n        getSelectedNodeIds = =>\n            return (n.id for n in @tree_widget.getSelectedNodes())\n\n        return {\n            open_nodes: getOpenNodeIds(),\n            selected_node: getSelectedNodeIds()\n        }\n\n    # Set initial state\n    # Don't handle nodes that are loaded on demand\n    #\n    # result: must load on demand\n    setInitialState: (state) ->\n        if not state\n            return false\n        else\n            must_load_on_demand = @_openInitialNodes(state.open_nodes)\n\n            @_selectInitialNodes(state.selected_node)\n\n            return must_load_on_demand\n\n    _openInitialNodes: (node_ids) ->\n        must_load_on_demand = false\n\n        for node_id in node_ids\n            node = @tree_widget.getNodeById(node_id)\n\n            if node\n                if not node.load_on_demand\n                    node.is_open = true\n                else\n                    must_load_on_demand = true\n\n        return must_load_on_demand\n\n    _selectInitialNodes: (node_ids) ->\n        select_count = 0\n\n        for node_id in node_ids\n            node = @tree_widget.getNodeById(node_id)\n\n            if node\n                select_count += 1\n\n                @tree_widget.select_node_handler.addToSelection(node)\n\n        return select_count != 0\n\n    setInitialStateOnDemand: (state, cb_finished) ->\n        if state\n            @_setInitialStateOnDemand(state.open_nodes, state.selected_node, cb_finished)\n        else\n            cb_finished()\n\n    _setInitialStateOnDemand: (node_ids, selected_nodes, cb_finished) ->\n        loading_count = 0\n\n        openNodes = =>\n            new_nodes_ids = []\n\n            for node_id in node_ids\n                node = @tree_widget.getNodeById(node_id)\n\n                if not node\n                    new_nodes_ids.push(node_id)\n                else\n                    if not node.is_loading\n                        if node.load_on_demand\n                            loadAndOpenNode(node)\n                        else\n                            @tree_widget._openNode(node, false)\n\n            node_ids = new_nodes_ids\n\n            if @_selectInitialNodes(selected_nodes)\n                @tree_widget._refreshElements()\n\n            if loading_count == 0\n                cb_finished()\n\n        loadAndOpenNode = (node) =>\n            loading_count += 1\n            @tree_widget._openNode(\n                node,\n                false,\n                ->\n                    loading_count -= 1\n                    openNodes()\n            )\n\n        openNodes()\n\n    getCookieName: ->\n        if typeof @tree_widget.options.saveState is 'string'\n            return @tree_widget.options.saveState\n        else\n            return 'tree'\n\n    supportsLocalStorage: ->\n        testSupport = ->\n            # Is local storage supported?\n            if not localStorage?\n                return false\n            else\n                # Check if it's possible to store an item. Safari does not allow this in private browsing mode.\n                try\n                    key = '_storage_test'\n                    sessionStorage.setItem(key, true)\n                    sessionStorage.removeItem(key)\n                catch error\n                    return false\n\n                return true\n\n        if not @_supportsLocalStorage?\n            @_supportsLocalStorage = testSupport()\n\n        return @_supportsLocalStorage\n\n    getNodeIdToBeSelected: ->\n        state = @getStateFromStorage()\n\n        if state and state.selected_node\n            return state.selected_node[0]\n        else\n            return null\n\n\nmodule.exports = SaveStateHandler\n\n\n\n// WEBPACK FOOTER //\n// ./src/save_state_handler.coffee","$ = jQuery\n\n\nclass ScrollHandler\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n        @previous_top = -1\n        @is_initialized = false\n\n    _initScrollParent: ->\n        getParentWithOverflow = =>\n            css_values = ['overflow', 'overflow-y']\n\n            hasOverFlow = (el) ->\n                for css_value in css_values\n                    if $.css(el, css_value) in ['auto', 'scroll']\n                        return true\n\n                return false\n\n            if hasOverFlow(@tree_widget.$el[0])\n                return @tree_widget.$el\n\n            for el in @tree_widget.$el.parents()\n                if hasOverFlow(el)\n                    return $(el)\n\n            return null\n\n        setDocumentAsScrollParent = =>\n            @scroll_parent_top = 0\n            @$scroll_parent = null\n\n        if @tree_widget.$el.css('position') == 'fixed'\n            setDocumentAsScrollParent()\n\n        $scroll_parent = getParentWithOverflow()\n\n        if $scroll_parent and $scroll_parent.length and $scroll_parent[0].tagName != 'HTML'\n            @$scroll_parent = $scroll_parent\n            @scroll_parent_top = @$scroll_parent.offset().top\n        else\n            setDocumentAsScrollParent()\n\n        @is_initialized = true\n\n    _ensureInit: ->\n        if not @is_initialized\n            @_initScrollParent()\n\n    checkScrolling: ->\n        @_ensureInit()\n\n        hovered_area = @tree_widget.dnd_handler.hovered_area\n\n        if hovered_area and hovered_area.top != @previous_top\n            @previous_top = hovered_area.top\n\n            if @$scroll_parent\n                @_handleScrollingWithScrollParent(hovered_area)\n            else\n                @_handleScrollingWithDocument(hovered_area)\n\n    _handleScrollingWithScrollParent: (area) ->\n        distance_bottom = @scroll_parent_top + @$scroll_parent[0].offsetHeight - area.bottom\n\n        if distance_bottom < 20\n            @$scroll_parent[0].scrollTop += 20\n            @tree_widget.refreshHitAreas()\n            @previous_top = -1\n        else if (area.top - @scroll_parent_top) < 20\n            @$scroll_parent[0].scrollTop -= 20\n            @tree_widget.refreshHitAreas()\n            @previous_top = -1\n\n    _handleScrollingWithDocument: (area) ->\n        distance_top = area.top - $(document).scrollTop()\n\n        if distance_top < 20\n            $(document).scrollTop($(document).scrollTop() - 20)\n        else if $(window).height() - (area.bottom - $(document).scrollTop()) < 20\n            $(document).scrollTop($(document).scrollTop() + 20)\n\n    scrollTo: (top) ->\n        @_ensureInit()\n\n        if @$scroll_parent\n            @$scroll_parent[0].scrollTop = top\n        else\n            tree_top = @tree_widget.$el.offset().top\n            $(document).scrollTop(top + tree_top)\n\n    isScrolledIntoView: (element) ->\n        @_ensureInit()\n\n        $element = $(element)\n\n        if @$scroll_parent\n            view_top = 0\n            view_bottom = @$scroll_parent.height()\n\n            element_top = $element.offset().top - @scroll_parent_top\n            element_bottom = element_top + $element.height()\n        else\n            view_top = $(window).scrollTop()\n            view_bottom = view_top + $(window).height()\n\n            element_top = $element.offset().top\n            element_bottom = element_top + $element.height()\n\n        return (element_bottom <= view_bottom) and (element_top >= view_top)\n\n\nmodule.exports = ScrollHandler\n\n\n\n// WEBPACK FOOTER //\n// ./src/scroll_handler.coffee","$ = jQuery\n\n\nclass SelectNodeHandler\n    constructor: (tree_widget) ->\n        @tree_widget = tree_widget\n        @clear()\n\n    getSelectedNode: ->\n        selected_nodes = @getSelectedNodes()\n\n        if selected_nodes.length\n            return selected_nodes[0]\n        else\n            return false\n\n    getSelectedNodes: ->\n        if @selected_single_node\n            return [@selected_single_node]\n        else\n            selected_nodes = []\n\n            for id of @selected_nodes\n                node = @tree_widget.getNodeById(id)\n                if node\n                    selected_nodes.push(node)\n\n            return selected_nodes\n\n    getSelectedNodesUnder: (parent) ->\n        if @selected_single_node\n            if parent.isParentOf(@selected_single_node)\n                return [@selected_single_node]\n            else\n                return []\n        else\n            selected_nodes = []\n\n            for id of @selected_nodes\n                node = @tree_widget.getNodeById(id)\n                if node and parent.isParentOf(node)\n                    selected_nodes.push(node)\n\n            return selected_nodes\n\n    isNodeSelected: (node) ->\n        if not node\n            return false\n        else if node.id\n            if @selected_nodes[node.id]\n                return true\n            else\n                return false\n        else if @selected_single_node\n            return @selected_single_node.element == node.element\n        else\n            return false\n\n    clear: ->\n        @selected_nodes = {}\n        @selected_single_node = null\n\n    removeFromSelection: (node, include_children=false) ->\n        if not node.id\n            if @selected_single_node && node.element == @selected_single_node.element\n                @selected_single_node = null\n        else\n            delete @selected_nodes[node.id]\n\n            if include_children\n                node.iterate(\n                    (n) =>\n                        delete @selected_nodes[node.id]\n                        return true\n                )\n\n    addToSelection: (node) ->\n        if node.id\n            @selected_nodes[node.id] = true\n        else\n            @selected_single_node = node\n\n\nmodule.exports = SelectNodeHandler\n\n\n\n// WEBPACK FOOTER //\n// ./src/select_node_handler.coffee","module.exports = '1.3.7'\n\n\n\n// WEBPACK FOOTER //\n// ./src/version.coffee"],"sourceRoot":""}